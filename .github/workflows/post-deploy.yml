on:
  workflow_call:
    inputs:
      ecs_cluster:
        required: true
        type: string
      ecs_service:
        required: true
        type: string
      aws_region:
        type: string
        default: "us-east-1"
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
    outputs:
      app_url:
        description: "The ECS application URL"
        value: ${{ jobs.get_app_url.outputs.app_url }}

jobs:
  get_app_url:
    runs-on: ubuntu-latest
    outputs:
      app_url: ${{ steps.set_app_url.outputs.app_url }}
    env:
      ecs_cluster: ${{ inputs.ecs_cluster }}
      ecs_service: ${{ inputs.ecs_service }}
      AWS_REGION: ${{ inputs.aws_region }}
    steps:
      - name: Configure AWS credentials
        id: aws-cred
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set Task Public IP
        run: |
          TASK_ARN=$(aws ecs list-tasks --cluster ${{ env.ecs_cluster }} --service-name ${{ env.ecs_service }} --query 'taskArns[0]' --output text)
          echo "TASK_ARN: ${TASK_ARN}"
          TASK_DETAILS=$(aws ecs describe-tasks --cluster ${{ env.ecs_cluster }} --task "${TASK_ARN}" --query 'tasks[0].attachments[0].details')
          ENI=$(echo $TASK_DETAILS | jq -r '.[] | select(.name=="networkInterfaceId").value')
          PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids "${ENI}" --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
          echo "TASK_PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Get Task Public IP
        id: set_app_url
        run: |
          echo "ECS Task Public IP: ${{ env.TASK_PUBLIC_IP }}"
          if [ "$BRANCH_NAME" != "master" ]
          then
            echo "::set-output name=app_url::${{ env.TASK_PUBLIC_IP }}:5000"
          else
            APP_URL=$(aws elbv2 describe-load-balancers --names ${{ env.ecs_cluster }} --query 'LoadBalancers[0].DNSName' --output text)
            echo "::set-output name=app_url::$APP_URL"
          fi